AWSTemplateFormatVersion: '2010-09-09'
Resources:
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: 'MyVPC'

  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: '10.0.1.0/24'
      VpcId: !Ref MyVPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'PublicSubnet'

  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: '10.0.2.0/24'
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: 'PrivateSubnet'

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: 'InternetGateway'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      SubnetId: !Ref PublicSubnet
      AllocationId: !GetAtt EIP.AllocationId

  EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: 'PrivateRouteTable'

  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NATGateway

  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      SubnetId: !Ref PrivateSubnet
      ImageId: 'ami-0c55b159cbfafe1f0'
      DisableApiTermination: true
      Tags:
        - Key: Name
          Value: 'MyEC2Instance'

  CloudTrail:
    Type: 'AWS::CloudTrail::Trail'
    Properties:
      TrailName: 'MyCloudTrail'
      S3BucketName: !Ref S3Bucket
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: true
      EnableLogFileValidation: true
      CloudWatchLogsLogGroupArn: !GetAtt CloudWatchLogsGroup.Arn
      CloudWatchLogsRoleArn: !GetAtt CloudTrailRole.Arn
      EventSelectors:
        - ReadWriteType: 'WriteOnly'
          IncludeManagementEvents: true
          DataResources:
            - Type: 'AWS::EC2::Instance'
              Values:
                - 'arn:aws:ec2:::instance/*'

  CloudTrailRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'cloudtrail.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'CloudTrailPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'

  CloudWatchLogsGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/aws/cloudtrail/MyCloudTrailLogs'
      RetentionInDays: 7

  CloudWatchAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: 'EC2-DeletionAttempt'
      AlarmDescription: 'Alarm when an EC2 instance deletion attempt is detected'
      MetricName: 'Count'
      Namespace: 'CloudTrailMetrics'
      Statistic: 'Sum'
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '1'
      ComparisonOperator: 'GreaterThanOrEqualToThreshold'
      AlarmActions:
        - Ref: SNSTopic

  SNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Protocol: 'email'
          Endpoint: 'your-email@example.com'
      TopicName: 'EC2DeletionAlarm'

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 'my-cloudtrail-logs-bucket'
